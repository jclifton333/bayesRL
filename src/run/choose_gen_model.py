import sys
import pdb
import os
this_dir = os.path.dirname(os.path.abspath(__file__))
project_dir = os.path.join(this_dir, '..', '..')
sys.path.append(project_dir)


import matplotlib.pyplot as plt
from src.environments.Bandit import NormalCB, NormalUniformCB
from src.policies import tuned_bandit_policies as tuned_bandit
from src.policies import global_optimization as opt
from src.policies import rollout
import copy
import numpy as np
from scipy.linalg import block_diag
from functools import partial
import datetime
import yaml
import multiprocessing as mp


def episode(policy_name, label, pre_simulate=True):

  np.random.seed(label)
  T = 100
  mc_replicates = 1

  # ToDo: Create policy class that encapsulates this behavior
  if policy_name == 'eps':
    tuning_function = lambda a, b, c: 0.05  # Constant epsilon
    policy = tuned_bandit.linear_cb_epsilon_greedy_policy
    tune = False
    tuning_function_parameter = None
  elif policy_name == 'eps-decay-fixed':
    tuning_function = lambda a, t, c: 0.5 / (t + 1)
    policy = tuned_bandit.linear_cb_epsilon_greedy_policy
    tune = False
    tuning_function_parameter = None
  elif policy_name == 'eps-decay':
    tuning_function = tuned_bandit.stepwise_linear_epsilon
    policy = tuned_bandit.linear_cb_epsilon_greedy_policy
    tune = True
    tuning_function_parameter = np.ones(10) * 0.025
  elif policy_name == 'greedy':
    tuning_function = lambda a, b, c: 0.00  # Constant epsilon
    policy = tuned_bandit.linear_cb_epsilon_greedy_policy
    tune = False
    tuning_function_parameter = None
  elif policy_name == 'worst':
    tuning_function = lambda a, b, c: 0.00
    policy = ref.linear_cb_worst_policy
    tune = False
    tuning_function_parameter = None
  elif policy_name == 'ts':
    tuning_function = lambda a, b, c: 1.0  # No shrinkage
    policy = tuned_bandit.linear_cb_thompson_sampling_policy
    tune = False
    tuning_function_parameter = None
  # elif policy_name == 'ts-shrink':
  #   tuning_function = tuned_bandit.expit_truncate
  #   policy = tuned_bandit.thompson_sampling_policy
  #   tune = True
  #   tuning_function_parameter = np.array([-2, 1])
  else:
    raise ValueError('Incorrect policy name')
#  matrixSize = 20
#  A = np.random.rand(matrixSize,matrixSize)
#  B = np.dot(A,A.transpose())
  list_of_reward_betas = [np.aarray([0.79801507, 0.869156  , 0.12067324, 0.30860787, 0.52701567,
       0.02710389, 0.4344193 , 0.38491318, 0.27331386, 0.52990251]), np.array([0.79801507, 0.869156  , 0.12067324, 0.30860787, 0.52701567,
       0.02710389, 0.4344193 , 0.38491318, 0.27331386, 0.52990251])+1]
  list_of_reward_vars = np.array([0.53454587, 300.01063972])
  context_mean = np.array([0.20997853, 0.57025517, 0.9289013 , 0.04883863, 0.88541256,
       0.4365952 , 0.54549739, 0.19616467, 0.15778277, 0.09948872])
  context_var=np.array([[7.98276236, 4.34446948, 5.03530407, 5.22875089, 4.56662937,
        5.13621898, 5.99482134, 5.32610703, 5.91639876, 5.87807513,
        6.77669528, 6.37609748, 4.40676942, 5.49734578, 5.33159167,
        6.44444122, 5.47585329, 6.69313693, 4.80346351, 6.99195836],
       [4.34446948, 5.13026266, 4.18454808, 3.93887876, 3.87594195,
        3.57806457, 4.34280159, 4.54711343, 4.90913783, 3.93923209,
        4.53897513, 4.7533915 , 3.1196874 , 3.79383385, 4.21327653,
        4.15664968, 3.26195697, 3.98941201, 2.94574515, 4.15117169],
       [5.03530407, 4.18454808, 6.3481678 , 3.69392208, 4.25967452,
        3.4855387 , 4.87325256, 4.82343004, 5.04452468, 4.91285898,
        5.45110639, 4.68845558, 3.48328967, 4.76850803, 4.77270786,
        4.15879927, 4.35306462, 4.69759825, 3.0468161 , 5.66944146],
       [5.22875089, 3.93887876, 3.69392208, 5.86085708, 4.76592108,
        4.52402357, 4.94096514, 4.77523985, 5.5076808 , 5.44426615,
        4.46682649, 5.13697352, 4.15688769, 3.81120755, 4.84007511,
        5.32337744, 4.33378539, 4.84383763, 3.61511942, 5.19285518],
       [4.56662937, 3.87594195, 4.25967452, 4.76592108, 6.01367139,
        4.68853183, 5.18365331, 4.67357081, 5.6342133 , 5.2634167 ,
        4.72565609, 4.97182587, 3.41910567, 4.72702507, 5.23984195,
        4.53810986, 3.97857037, 5.16111574, 3.7073305 , 4.13235789],
       [5.13621898, 3.57806457, 3.4855387 , 4.52402357, 4.68853183,
        5.00318707, 4.9195711 , 4.48369218, 4.98410778, 4.65674523,
        4.84501554, 4.95688498, 3.48857746, 3.91467519, 4.9920557 ,
        5.51005048, 3.77849282, 5.37971902, 3.87253406, 4.41016309],
       [5.99482134, 4.34280159, 4.87325256, 4.94096514, 5.18365331,
        4.9195711 , 6.88000556, 5.77013427, 6.29390156, 5.52598011,
        5.64957387, 6.10503242, 3.81622028, 5.12708866, 5.54120545,
        5.75424696, 4.49219531, 6.00568217, 4.01997416, 5.82909484],
       [5.32610703, 4.54711343, 4.82343004, 4.77523985, 4.67357081,
        4.48369218, 5.77013427, 6.5160507 , 5.56918616, 4.93483039,
        5.08047352, 5.16013481, 3.52487664, 4.28137834, 5.32965968,
        5.38709257, 4.20105558, 5.33977176, 3.44987847, 5.38056986],
       [5.91639876, 4.90913783, 5.04452468, 5.5076808 , 5.6342133 ,
        4.98410778, 6.29390156, 5.56918616, 7.50618304, 5.74114747,
        5.80757117, 6.4869033 , 4.14719954, 5.51029031, 5.70565163,
        6.22938315, 4.54683333, 6.18732805, 3.98258234, 6.1842551 ],
       [5.87807513, 3.93923209, 4.91285898, 5.44426615, 5.2634167 ,
        4.65674523, 5.52598011, 4.93483039, 5.74114747, 6.54390324,
        5.77681621, 5.6909263 , 4.31770165, 4.69031108, 5.16615321,
        5.36526373, 5.0819506 , 5.82912081, 3.7370665 , 5.63123062],
       [6.77669528, 4.53897513, 5.45110639, 4.46682649, 4.72565609,
        4.84501554, 5.64957387, 5.08047352, 5.80757117, 5.77681621,
        8.31770064, 7.05497667, 4.50614746, 5.00706364, 5.40297909,
        6.48152029, 6.00456937, 6.47793445, 4.9489964 , 6.63638234],
       [6.37609748, 4.7533915 , 4.68845558, 5.13697352, 4.97182587,
        4.95688498, 6.10503242, 5.16013481, 6.4869033 , 5.6909263 ,
        7.05497667, 8.30554716, 4.76188744, 5.1405115 , 5.64247404,
        6.90121942, 5.86344339, 6.18866417, 4.77326083, 6.99715023],
       [4.40676942, 3.1196874 , 3.48328967, 4.15688769, 3.41910567,
        3.48857746, 3.81622028, 3.52487664, 4.14719954, 4.31770165,
        4.50614746, 4.76188744, 4.61015725, 3.49841148, 4.16052922,
        4.66805972, 4.22062268, 4.25982979, 3.09353947, 4.79934352],
       [5.49734578, 3.79383385, 4.76850803, 3.81120755, 4.72702507,
        3.91467519, 5.12708866, 4.28137834, 5.51029031, 4.69031108,
        5.00706364, 5.1405115 , 3.49841148, 5.86430412, 4.99869633,
        4.54675775, 3.83156602, 5.06149589, 3.51173271, 5.16210308],
       [5.33159167, 4.21327653, 4.77270786, 4.84007511, 5.23984195,
        4.9920557 , 5.54120545, 5.32965968, 5.70565163, 5.16615321,
        5.40297909, 5.64247404, 4.16052922, 4.99869633, 6.71912451,
        6.04883661, 4.49354314, 5.22191447, 4.13519996, 5.28641423],
       [6.44444122, 4.15664968, 4.15879927, 5.32337744, 4.53810986,
        5.51005048, 5.75424696, 5.38709257, 6.22938315, 5.36526373,
        6.48152029, 6.90121942, 4.66805972, 4.54675775, 6.04883661,
        8.22547001, 5.29190688, 6.64033233, 4.56625498, 6.68579845],
       [5.47585329, 3.26195697, 4.35306462, 4.33378539, 3.97857037,
        3.77849282, 4.49219531, 4.20105558, 4.54683333, 5.0819506 ,
        6.00456937, 5.86344339, 4.22062268, 3.83156602, 4.49354314,
        5.29190688, 5.901653  , 5.1689904 , 3.30553887, 5.59048234],
       [6.69313693, 3.98941201, 4.69759825, 4.84383763, 5.16111574,
        5.37971902, 6.00568217, 5.33977176, 6.18732805, 5.82912081,
        6.47793445, 6.18866417, 4.25982979, 5.06149589, 5.22191447,
        6.64033233, 5.1689904 , 7.378824  , 4.20758866, 5.90711321],
       [4.80346351, 2.94574515, 3.0468161 , 3.61511942, 3.7073305 ,
        3.87253406, 4.01997416, 3.44987847, 3.98258234, 3.7370665 ,
        4.9489964 , 4.77326083, 3.09353947, 3.51173271, 4.13519996,
        4.56625498, 3.30553887, 4.20758866, 4.74895714, 4.76473801],
       [6.99195836, 4.15117169, 5.66944146, 5.19285518, 4.13235789,
        4.41016309, 5.82909484, 5.38056986, 6.1842551 , 5.63123062,
        6.63638234, 6.99715023, 4.79934352, 5.16210308, 5.28641423,
        6.68579845, 5.59048234, 5.90711321, 4.76473801, 8.34608232]])
#  env = NormalCB(list_of_reward_betas=list_of_reward_betas, list_of_reward_vars=list_of_reward_vars,
#                             context_mean=context_mean, context_var= context_var)
#  env = NormalUniformCB()
  env = NormalMAB(list_of_reward_mus=[[0], [1]], list_of_reward_vars=[[1], [140]])
  cumulative_regret = 0.0
  env.reset()

  for t in range(T):
    X = env.X
#    print(t, X)
    estimated_context_mean = np.mean(X, axis=0)
    estimated_context_variance = np.cov(X, rowvar=False)

    if tune:
      if pre_simulate:
        sim_env = NormalCB(list_of_reward_betas=env.beta_hat_list, list_of_reward_vars=env.sigma_hat_list,
                           context_mean=estimated_context_mean, context_var=estimated_context_variance)
        pre_simulated_data = sim_env.generate_mc_samples(mc_replicates, T)
        tuning_function_parameter = opt.bayesopt(rollout.normal_cb_rollout_with_fixed_simulations, policy,
                                                 tuning_function, tuning_function_parameter, T, estimated_context_mean,
                                                 estimated_context_variance, sim_env, mc_replicates,
                                                 {'pre_simulated_data': pre_simulated_data})
      else:
        tuning_function_parameter = tuned_bandit.random_search(tuned_bandit.oracle_rollout, policy, tuning_function,
                                                               tuning_function_parameter,
                                                               linear_model_results, T, t, estimated_context_mean,
                                                               estimated_context_variance, env)

    x = copy.copy(env.curr_context)
#    print('time {} epsilon {}'.format(t, tuning_function(T,t,tuning_function_parameter)))
    beta_hat = np.array(env.beta_hat_list)
    action = policy(beta_hat, env.sampling_cov_list, x, tuning_function, tuning_function_parameter, T, t, env)
    env.step(action)
    cumulative_regret += env.regret(action, x)

  return cumulative_regret


def run(policy_name, save=True):
  """

  :return:
  """
  list_of_reward_betas = [np.array([0.8707707 , 0.75783223, 0.14526938, 0.45832716, 0.10409392,
       0.01620461, 0.42304563, 0.46354971, 0.65589209, 0.36481392,
       0.62500624, 0.66866799, 0.53674913, 0.20116264, 0.18467868,
       0.8608488 , 0.31731799, 0.96113913, 0.94419445, 0.19494532]), np.array([0.8707707 , 0.75783223, 0.14526938, 0.45832716, 0.10409392,
       0.01620461, 0.42304563, 0.46354971, 0.65589209, 0.36481392,
       0.62500624, 0.66866799, 0.53674913, 0.20116264, 0.18467868,
       0.8608488 , 0.31731799, 0.96113913, 0.94419445, 0.19494532])+1]
  list_of_reward_vars = np.array([0.53454587, 300.01063972])
  context_mean = np.array([0.04226652, 0.90476398, 0.90778442, 0.44245766, 0.27420509,
       0.87093526, 0.53490145, 0.52054253, 0.57675156, 0.60274473,
       0.7986946 , 0.82929701, 0.55747621, 0.56719647, 0.21697131,
       0.98330093, 0.52506505, 0.49066754, 0.73856661, 0.68066736])*50
  context_var=np.array([[7.98276236, 4.34446948, 5.03530407, 5.22875089, 4.56662937,
        5.13621898, 5.99482134, 5.32610703, 5.91639876, 5.87807513,
        6.77669528, 6.37609748, 4.40676942, 5.49734578, 5.33159167,
        6.44444122, 5.47585329, 6.69313693, 4.80346351, 6.99195836],
       [4.34446948, 5.13026266, 4.18454808, 3.93887876, 3.87594195,
        3.57806457, 4.34280159, 4.54711343, 4.90913783, 3.93923209,
        4.53897513, 4.7533915 , 3.1196874 , 3.79383385, 4.21327653,
        4.15664968, 3.26195697, 3.98941201, 2.94574515, 4.15117169],
       [5.03530407, 4.18454808, 6.3481678 , 3.69392208, 4.25967452,
        3.4855387 , 4.87325256, 4.82343004, 5.04452468, 4.91285898,
        5.45110639, 4.68845558, 3.48328967, 4.76850803, 4.77270786,
        4.15879927, 4.35306462, 4.69759825, 3.0468161 , 5.66944146],
       [5.22875089, 3.93887876, 3.69392208, 5.86085708, 4.76592108,
        4.52402357, 4.94096514, 4.77523985, 5.5076808 , 5.44426615,
        4.46682649, 5.13697352, 4.15688769, 3.81120755, 4.84007511,
        5.32337744, 4.33378539, 4.84383763, 3.61511942, 5.19285518],
       [4.56662937, 3.87594195, 4.25967452, 4.76592108, 6.01367139,
        4.68853183, 5.18365331, 4.67357081, 5.6342133 , 5.2634167 ,
        4.72565609, 4.97182587, 3.41910567, 4.72702507, 5.23984195,
        4.53810986, 3.97857037, 5.16111574, 3.7073305 , 4.13235789],
       [5.13621898, 3.57806457, 3.4855387 , 4.52402357, 4.68853183,
        5.00318707, 4.9195711 , 4.48369218, 4.98410778, 4.65674523,
        4.84501554, 4.95688498, 3.48857746, 3.91467519, 4.9920557 ,
        5.51005048, 3.77849282, 5.37971902, 3.87253406, 4.41016309],
       [5.99482134, 4.34280159, 4.87325256, 4.94096514, 5.18365331,
        4.9195711 , 6.88000556, 5.77013427, 6.29390156, 5.52598011,
        5.64957387, 6.10503242, 3.81622028, 5.12708866, 5.54120545,
        5.75424696, 4.49219531, 6.00568217, 4.01997416, 5.82909484],
       [5.32610703, 4.54711343, 4.82343004, 4.77523985, 4.67357081,
        4.48369218, 5.77013427, 6.5160507 , 5.56918616, 4.93483039,
        5.08047352, 5.16013481, 3.52487664, 4.28137834, 5.32965968,
        5.38709257, 4.20105558, 5.33977176, 3.44987847, 5.38056986],
       [5.91639876, 4.90913783, 5.04452468, 5.5076808 , 5.6342133 ,
        4.98410778, 6.29390156, 5.56918616, 7.50618304, 5.74114747,
        5.80757117, 6.4869033 , 4.14719954, 5.51029031, 5.70565163,
        6.22938315, 4.54683333, 6.18732805, 3.98258234, 6.1842551 ],
       [5.87807513, 3.93923209, 4.91285898, 5.44426615, 5.2634167 ,
        4.65674523, 5.52598011, 4.93483039, 5.74114747, 6.54390324,
        5.77681621, 5.6909263 , 4.31770165, 4.69031108, 5.16615321,
        5.36526373, 5.0819506 , 5.82912081, 3.7370665 , 5.63123062],
       [6.77669528, 4.53897513, 5.45110639, 4.46682649, 4.72565609,
        4.84501554, 5.64957387, 5.08047352, 5.80757117, 5.77681621,
        8.31770064, 7.05497667, 4.50614746, 5.00706364, 5.40297909,
        6.48152029, 6.00456937, 6.47793445, 4.9489964 , 6.63638234],
       [6.37609748, 4.7533915 , 4.68845558, 5.13697352, 4.97182587,
        4.95688498, 6.10503242, 5.16013481, 6.4869033 , 5.6909263 ,
        7.05497667, 8.30554716, 4.76188744, 5.1405115 , 5.64247404,
        6.90121942, 5.86344339, 6.18866417, 4.77326083, 6.99715023],
       [4.40676942, 3.1196874 , 3.48328967, 4.15688769, 3.41910567,
        3.48857746, 3.81622028, 3.52487664, 4.14719954, 4.31770165,
        4.50614746, 4.76188744, 4.61015725, 3.49841148, 4.16052922,
        4.66805972, 4.22062268, 4.25982979, 3.09353947, 4.79934352],
       [5.49734578, 3.79383385, 4.76850803, 3.81120755, 4.72702507,
        3.91467519, 5.12708866, 4.28137834, 5.51029031, 4.69031108,
        5.00706364, 5.1405115 , 3.49841148, 5.86430412, 4.99869633,
        4.54675775, 3.83156602, 5.06149589, 3.51173271, 5.16210308],
       [5.33159167, 4.21327653, 4.77270786, 4.84007511, 5.23984195,
        4.9920557 , 5.54120545, 5.32965968, 5.70565163, 5.16615321,
        5.40297909, 5.64247404, 4.16052922, 4.99869633, 6.71912451,
        6.04883661, 4.49354314, 5.22191447, 4.13519996, 5.28641423],
       [6.44444122, 4.15664968, 4.15879927, 5.32337744, 4.53810986,
        5.51005048, 5.75424696, 5.38709257, 6.22938315, 5.36526373,
        6.48152029, 6.90121942, 4.66805972, 4.54675775, 6.04883661,
        8.22547001, 5.29190688, 6.64033233, 4.56625498, 6.68579845],
       [5.47585329, 3.26195697, 4.35306462, 4.33378539, 3.97857037,
        3.77849282, 4.49219531, 4.20105558, 4.54683333, 5.0819506 ,
        6.00456937, 5.86344339, 4.22062268, 3.83156602, 4.49354314,
        5.29190688, 5.901653  , 5.1689904 , 3.30553887, 5.59048234],
       [6.69313693, 3.98941201, 4.69759825, 4.84383763, 5.16111574,
        5.37971902, 6.00568217, 5.33977176, 6.18732805, 5.82912081,
        6.47793445, 6.18866417, 4.25982979, 5.06149589, 5.22191447,
        6.64033233, 5.1689904 , 7.378824  , 4.20758866, 5.90711321],
       [4.80346351, 2.94574515, 3.0468161 , 3.61511942, 3.7073305 ,
        3.87253406, 4.01997416, 3.44987847, 3.98258234, 3.7370665 ,
        4.9489964 , 4.77326083, 3.09353947, 3.51173271, 4.13519996,
        4.56625498, 3.30553887, 4.20758866, 4.74895714, 4.76473801],
       [6.99195836, 4.15117169, 5.66944146, 5.19285518, 4.13235789,
        4.41016309, 5.82909484, 5.38056986, 6.1842551 , 5.63123062,
        6.63638234, 6.99715023, 4.79934352, 5.16210308, 5.28641423,
        6.68579845, 5.59048234, 5.90711321, 4.76473801, 8.34608232]])
  
  replicates = 1000
  T = 100
  num_cpus = int(mp.cpu_count())
  results = []
  pool = mp.Pool(processes=num_cpus)

  episode_partial = partial(episode, policy_name)

  num_batches = int(replicates / num_cpus)
  for batch in range(num_batches):
    results_for_batch = pool.map(episode_partial, range(batch*num_cpus, (batch+1)*num_cpus))
    results += results_for_batch
  print(np.mean(results), np.std(results))
  # Save results
  if save:
#    results = {'T': float(100), 'policy_name': policy_name, 'mean_regret': float(np.mean(results)), 'std_regret': float(np.std(results)),
#                'beta': list_of_reward_betas, 'reward_vars':list_of_reward_vars, 'context_mean':context_mean, 'context_var':context_var, 'regret list': [float(r) for r in results]}
#    
    results = {'T': float(T), 'policy_name': policy_name, 'mean_regret': float(np.mean(results)), 'std_regret': float(np.std(results)),'regret list': [float(r) for r in results]}
    
    base_name = 'normaluniformcb-{}-{}'.format(T, policy_name)
    prefix = os.path.join(project_dir, 'src', 'run', base_name)
    suffix = datetime.datetime.now().strftime("%y%m%d_%H%M%S")
    filename = '{}_{}.yml'.format(prefix, suffix)
    with open(filename, 'w') as outfile:
      yaml.dump(results, outfile)

  return


if __name__ == '__main__':
  # episode('eps-decay', np.random.randint(low=1, high=1000))
  run('eps-decay-fixed')
#  run('eps')
  run('greedy')







